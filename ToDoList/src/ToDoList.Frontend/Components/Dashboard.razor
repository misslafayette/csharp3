@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Dashboard</h1>

<table class="table table-hover mt-3">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Description</th>
        <th>Completed</th>
        <th>Actions</th>
    </thead>
    <tbody>
    @if (toDoItems is null)
    {
        <p>Nacitam...</p>
    }

    @if (toDoItems is not null)
    {
        @foreach (var toDoItem in toDoItems)
        {
            <tr class=@TypeOfRowBasedOnToDoItemState(toDoItem.IsCompleted)>
                <td>@toDoItem.ToDoItemId</td>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.Description</td>
                <td>@toDoItem.IsCompleted</td>
                <td><button class="btn btn-success" @onclick="()=> EditItem(toDoItem)">Edit</button></td>
            </tr>
        }
    }
    </tbody>
</table>


        <th><button class="btn btn-success" @onclick="OrderById">Zoradiť podľa ID</button></th>
        <th><button class="btn btn-success" @onclick="OrderByName">Zoradiť podľa mena</button></th>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }
    private List<ToDoItemView> toDoItems;

    private string TypeOfRowBasedOnToDoItemState(bool IsCompleted)
    {
        return IsCompleted? "table-success":"table-danger";
    }

    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(uloha => uloha.ToDoItemId).ToList();
    }

    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(uloha => uloha.Name).ToList();
    }

    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }
}
