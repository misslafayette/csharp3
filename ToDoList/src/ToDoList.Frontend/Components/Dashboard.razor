@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<h1>Dashboard</h1>

<table class="table table-hover mt-3">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Description</th>
        <th>Completed</th>
        <th>Actions</th>
    </thead>
    <tbody>
    @if (toDoItems is null)
    {
        <p>Nacitam...</p>
    }

    @if (toDoItems is not null)
    {
        @foreach (var toDoItem in toDoItems)
        {
            <tr class=@TypeOfRowBasedOnToDoItemState(toDoItem.IsCompleted)>
                <td>@toDoItem.ToDoItemId</td>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.Description</td>
                <td>@toDoItem.IsCompleted</td>
                <td><button class="btn btn-success" @onclick="()=> EditItem(toDoItem)"><i class="fa fa-pencil-square"></i> Edit</button>
                <button class="btn btn-success" @onclick="()=> CheckboxItem(toDoItem)"><i class="fa fa-check-square"></i> Done</button>
                <button class="btn btn-danger" @onclick="()=> DeleteItemAsync(toDoItem)"><i class="fa fa-trash"></i> Delete</button></td>
            </tr>
        }
    }
    </tbody>
</table>


        <th><button class="btn btn-success" @onclick="OrderById">Zoradiť podľa ID</button></th>
        <th><button class="btn btn-success" @onclick="OrderByName">Zoradiť podľa mena</button></th>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }
    private List<ToDoItemView> toDoItems;

    private string TypeOfRowBasedOnToDoItemState(bool IsCompleted)
    {
        return IsCompleted? "table-success":"table-danger";
    }

    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(uloha => uloha.ToDoItemId).ToList();
    }

    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(uloha => uloha.Name).ToList();
    }


    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }

    public async Task CheckboxItem(ToDoItemView toDoItem)
    {
        toDoItem.IsCompleted = !toDoItem.IsCompleted;
        await ToDoItemsClient.UpdateItemAsync(toDoItem);

    }
    public async Task DeleteItemAsync(ToDoItemView toDoItem)
    {
        await ToDoItemsClient.DeleteItemAsync(toDoItem);
        toDoItems.Remove(toDoItem);
    }
}
